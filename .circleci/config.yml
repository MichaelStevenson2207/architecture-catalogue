version: 2.1

orbs:
  cloudfoundry: circleci/cloudfoundry@0.1.73

commands:
  install_php_extensions_cmd:
    steps:
      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0
      - run: sudo docker-php-ext-install pdo pdo_mysql

  install_laravel_application_cmd:
    steps:
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

  install_node_components_cmd:
    steps:
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: npm install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

  test_cmd:
    steps:
      # prepare the database
      - run: touch database/database.sqlite
      - run: php artisan migrate --env=testing --database=sqlite --force

      # run tests with phpunit
      - run: ./vendor/bin/phpunit

  build_cmd:
    steps:
      - checkout
      - install_php_extensions_cmd
      - install_laravel_application_cmd
      - install_node_components_cmd

  install_cmd:
    steps:
      - run:
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api https://api.london.cloud.service.gov.uk
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s "$CF_SPACE"

  set_env_cmd:
    steps:
      - run:
          command: |
            # CiricleCI environment varialbes
            cf set-env $APP_NAME CIRCLE_BUILD_NUM "${CIRCLE_BUILD_NUM}"
            cf set-env $APP_NAME CIRCLE_SHA1 "${CIRCLE_SHA1}"
            cf set-env $APP_NAME CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
            cf set-env $APP_NAME CIRCLE_PROJECT_USERNAME "${CIRCLE_PROJECT_USERNAME}"
            cf set-env $APP_NAME CIRCLE_PROJECT_REPONAME "${CIRCLE_PROJECT_REPONAME}"
            cf set-env $APP_NAME CIRCLE_BRANCH "${CIRCLE_BRANCH}"
            cf set-env $APP_NAME CIRCLE_PULL_REQUEST "${CIRCLE_PULL_REQUEST}"
            # application environment variables
            cf set-env $APP_NAME ADMIN_PASSWORD "${ADMIN_PASSWORD}"
            cf set-env $APP_NAME ADMIN_USERNAME "${ADMIN_USERNAME}"
            cf set-env $APP_NAME APP_DEBUG "${APP_DEBUG}"
            cf set-env $APP_NAME APP_ENV "${APP_ENV}"
            cf set-env $APP_NAME APP_KEY "${APP_KEY}"
            cf set-env $APP_NAME APP_NAME "${APP_NAME}"
            cf set-env $APP_NAME APP_PAGINATION_MAX_PAGES "${APP_PAGINATION_MAX_PAGES}"
            cf set-env $APP_NAME APP_PAGINATION_PAGE_SIZE "${APP_PAGINATION_PAGE_SIZE}"
            cf set-env $APP_NAME APP_PHASE "${APP_PHASE}"
            cf set-env $APP_NAME APP_URL "${APP_URL}"
            cf set-env $APP_NAME AZURE_KEY "${AZURE_KEY}"
            cf set-env $APP_NAME AZURE_REDIRECT_URI "${AZURE_REDIRECT_URI}"
            cf set-env $APP_NAME AZURE_SECRET "${AZURE_SECRET}"
            cf set-env $APP_NAME CACHE_DRIVER "${CACHE_DRIVER}"
            cf set-env $APP_NAME COGNITO_CLIENT_ID "${COGNITO_CLIENT_ID}"
            cf set-env $APP_NAME COGNITO_DOMAIN "${COGNITO_DOMAIN}"
            cf set-env $APP_NAME COGNITO_REDIRECT_URI "${COGNITO_REDIRECT_URI}"
            cf set-env $APP_NAME DB_CERT_PATH "${DB_CERT_PATH}"
            cf set-env $APP_NAME DB_CONNECTION "${DB_CONNECTION}"
            cf set-env $APP_NAME GITHUB_CALLBACK_URL "${GITHUB_CALLBACK_URL}"
            cf set-env $APP_NAME GITHUB_CLIENT_ID "${GITHUB_CLIENT_ID}"
            cf set-env $APP_NAME GITHUB_CLIENT_SECRET "${GITHUB_CLIENT_SECRET}"
            cf set-env $APP_NAME GOVUK_NOTIFY_API_KEY "${GOVUK_NOTIFY_API_KEY}"
            cf set-env $APP_NAME GOVUK_NOTIFY_PASSWORD_RESET_TEMPLATE_ID "${GOVUK_NOTIFY_PASSWORD_RESET_TEMPLATE_ID}"
            cf set-env $APP_NAME GOVUK_NOTIFY_USER_WELCOM_TEMPLATE_ID "${GOVUK_NOTIFY_USER_WELCOME_TEMPLATE_ID}"
            cf set-env $APP_NAME GOVUK_NOTIFY_VERIFY_EMAIL_TEMPLATE_ID "${GOVUK_NOTIFY_VERIFY_EMAIL_TEMPLATE_ID}"
            cf set-env $APP_NAME LOG_CHANNEL "${LOG_CHANNEL}"
            cf set-env $APP_NAME LOG_SLACK_WEBHOOK_URL "${LOG_SLACK_WEBHOOK_URL}"
            cf set-env $APP_NAME MAIL_FROM_ADDRESS "${MAIL_FROM_ADDRESS}"
            cf set-env $APP_NAME MAIL_FROM_NAME "${MAIL_FROM_NAME}"
            cf set-env $APP_NAME NICS_EA_AUDIT_API "${NICS_EA_AUDIT_API}"
            cf set-env $APP_NAME NICS_EA_AUDIT_ENABLED "${NICS_EA_AUDIT_ENABLED}"
            cf set-env $APP_NAME NICS_EA_COGNITO_PASSWORD "${NICS_EA_COGNITO_PASSWORD}"
            cf set-env $APP_NAME NICS_EA_COGNITO_URL "${NICS_EA_COGNITO_URL}"
            cf set-env $APP_NAME NICS_EA_COGNITO_USER "${NICS_EA_COGNITO_USER}"
            cf set-env $APP_NAME NICS_EA_USAGE_TRACKING_ACCOUNT_CREATED_EVENT_ID "${NICS_EA_USAGE_TRACKING_ACCOUNT_CREATED_EVENT_ID}"
            cf set-env $APP_NAME NICS_EA_USAGE_TRACKING_API "${NICS_EA_USAGE_TRACKING_API}"
            cf set-env $APP_NAME NICS_EA_USAGE_TRACKING_TENANT_ID "${NICS_EA_USAGE_TRACKING_TENANT_ID}"
            cf set-env $APP_NAME NICS_EA_USAGE_TRACKING_TENANT_NAME "${NICS_EA_USAGE_TRACKING_TENANT_NAME}"
            cf set-env $APP_NAME QUEUE_CONNECTION "${QUEUE_CONNECTION}"
            cf set-env $APP_NAME SESSION_DOMAIN "${SESSION_DOMAIN}"
            cf set-env $APP_NAME SESSION_DRIVER "${SESSION_DRIVER}"
            cf set-env $APP_NAME SESSION_LIFETIME "${SESSION_LIFETIME}"
            cf set-env $APP_NAME SLACK_WEBHOOK_URL "${SLACK_WEBHOOK_URL}"

  push_cmd:
    steps:
      - run:
          command: |
            # build the application but don't start it
            cf push --no-start

      - set_env_cmd

      - run:
          command: |
            # start the application
            cf start $APP_NAME

  push_zdt_cmd:
    # zero downtime deployment
    steps:
      - run:
          command: |
            # create the application
            cf v3-create-app $APP_NAME

            # apply the manifest file to the application
            cf v3-apply-manifest -f manifest.yml

      - set_env_cmd

      - run:
          command: |
            # push a zero downtime version of the application
            cf v3-zdt-push $APP_NAME --wait-for-deploy-complete

executors:
    docker-executor:
      docker:
        - image: circleci/php:7.3-node-browsers
        - image: elastic/elasticsearch:6.5.0

    node-executor:
      docker:
        - image: 'circleci/node:10'

jobs:
  test-with-docker:
    executor: docker-executor
    steps:
      - build_cmd
      - test_cmd

  deploy-to-govuk:
    executor: docker-executor
    steps:
      # build the application
      - build_cmd

      # install the CF CLI
      - install_cmd

      # push the application to GOV.UK PaaS
      - push_zdt_cmd

workflows:
  deploy-to-govuk:
    jobs:
      - test-with-docker:
          context: build-test
      - deploy-to-govuk:
          filters:
            branches:
              only: /feature-.*/
          context: govuk-paas-sandbox
          requires:
            - test-with-docker
      - deploy-to-govuk:
          filters:
            branches:
              only: master
          context: govuk-paas-staging
          requires:
            - test-with-docker
